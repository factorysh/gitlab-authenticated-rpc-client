// Code generated by protoc-gen-go. DO NOT EDIT.
// source: auth.proto

package auth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AuthInfo struct {
	Url                  string   `protobuf:"bytes,1,opt,name=Url" json:"Url,omitempty"`
	Token                string   `protobuf:"bytes,2,opt,name=Token" json:"Token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthInfo) Reset()         { *m = AuthInfo{} }
func (m *AuthInfo) String() string { return proto.CompactTextString(m) }
func (*AuthInfo) ProtoMessage()    {}
func (*AuthInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_auth_e725c9a165800d3c, []int{0}
}
func (m *AuthInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthInfo.Unmarshal(m, b)
}
func (m *AuthInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthInfo.Marshal(b, m, deterministic)
}
func (dst *AuthInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthInfo.Merge(dst, src)
}
func (m *AuthInfo) XXX_Size() int {
	return xxx_messageInfo_AuthInfo.Size(m)
}
func (m *AuthInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AuthInfo proto.InternalMessageInfo

func (m *AuthInfo) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *AuthInfo) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type Token struct {
	Token                string   `protobuf:"bytes,1,opt,name=Token" json:"Token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Token) Reset()         { *m = Token{} }
func (m *Token) String() string { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()    {}
func (*Token) Descriptor() ([]byte, []int) {
	return fileDescriptor_auth_e725c9a165800d3c, []int{1}
}
func (m *Token) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Token.Unmarshal(m, b)
}
func (m *Token) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Token.Marshal(b, m, deterministic)
}
func (dst *Token) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Token.Merge(dst, src)
}
func (m *Token) XXX_Size() int {
	return xxx_messageInfo_Token.Size(m)
}
func (m *Token) XXX_DiscardUnknown() {
	xxx_messageInfo_Token.DiscardUnknown(m)
}

var xxx_messageInfo_Token proto.InternalMessageInfo

func (m *Token) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type JWT struct {
	JWT                  string   `protobuf:"bytes,1,opt,name=JWT" json:"JWT,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JWT) Reset()         { *m = JWT{} }
func (m *JWT) String() string { return proto.CompactTextString(m) }
func (*JWT) ProtoMessage()    {}
func (*JWT) Descriptor() ([]byte, []int) {
	return fileDescriptor_auth_e725c9a165800d3c, []int{2}
}
func (m *JWT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JWT.Unmarshal(m, b)
}
func (m *JWT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JWT.Marshal(b, m, deterministic)
}
func (dst *JWT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JWT.Merge(dst, src)
}
func (m *JWT) XXX_Size() int {
	return xxx_messageInfo_JWT.Size(m)
}
func (m *JWT) XXX_DiscardUnknown() {
	xxx_messageInfo_JWT.DiscardUnknown(m)
}

var xxx_messageInfo_JWT proto.InternalMessageInfo

func (m *JWT) GetJWT() string {
	if m != nil {
		return m.JWT
	}
	return ""
}

type GitlabPrivateToken struct {
	Token                string   `protobuf:"bytes,1,opt,name=Token" json:"Token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GitlabPrivateToken) Reset()         { *m = GitlabPrivateToken{} }
func (m *GitlabPrivateToken) String() string { return proto.CompactTextString(m) }
func (*GitlabPrivateToken) ProtoMessage()    {}
func (*GitlabPrivateToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_auth_e725c9a165800d3c, []int{3}
}
func (m *GitlabPrivateToken) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GitlabPrivateToken.Unmarshal(m, b)
}
func (m *GitlabPrivateToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GitlabPrivateToken.Marshal(b, m, deterministic)
}
func (dst *GitlabPrivateToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GitlabPrivateToken.Merge(dst, src)
}
func (m *GitlabPrivateToken) XXX_Size() int {
	return xxx_messageInfo_GitlabPrivateToken.Size(m)
}
func (m *GitlabPrivateToken) XXX_DiscardUnknown() {
	xxx_messageInfo_GitlabPrivateToken.DiscardUnknown(m)
}

var xxx_messageInfo_GitlabPrivateToken proto.InternalMessageInfo

func (m *GitlabPrivateToken) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto.RegisterType((*AuthInfo)(nil), "auth.AuthInfo")
	proto.RegisterType((*Token)(nil), "auth.Token")
	proto.RegisterType((*JWT)(nil), "auth.JWT")
	proto.RegisterType((*GitlabPrivateToken)(nil), "auth.GitlabPrivateToken")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Auth service

type AuthClient interface {
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	Bootstrap(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AuthInfo, error)
	Authenticate(ctx context.Context, in *Token, opts ...grpc.CallOption) (*JWT, error)
	AuthenticateWithGitlabPrivateToken(ctx context.Context, in *GitlabPrivateToken, opts ...grpc.CallOption) (*JWT, error)
}

type authClient struct {
	cc *grpc.ClientConn
}

func NewAuthClient(cc *grpc.ClientConn) AuthClient {
	return &authClient{cc}
}

func (c *authClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := grpc.Invoke(ctx, "/auth.Auth/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Bootstrap(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AuthInfo, error) {
	out := new(AuthInfo)
	err := grpc.Invoke(ctx, "/auth.Auth/Bootstrap", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Authenticate(ctx context.Context, in *Token, opts ...grpc.CallOption) (*JWT, error) {
	out := new(JWT)
	err := grpc.Invoke(ctx, "/auth.Auth/Authenticate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) AuthenticateWithGitlabPrivateToken(ctx context.Context, in *GitlabPrivateToken, opts ...grpc.CallOption) (*JWT, error) {
	out := new(JWT)
	err := grpc.Invoke(ctx, "/auth.Auth/AuthenticateWithGitlabPrivateToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Auth service

type AuthServer interface {
	Ping(context.Context, *empty.Empty) (*empty.Empty, error)
	Bootstrap(context.Context, *empty.Empty) (*AuthInfo, error)
	Authenticate(context.Context, *Token) (*JWT, error)
	AuthenticateWithGitlabPrivateToken(context.Context, *GitlabPrivateToken) (*JWT, error)
}

func RegisterAuthServer(s *grpc.Server, srv AuthServer) {
	s.RegisterService(&_Auth_serviceDesc, srv)
}

func _Auth_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Bootstrap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Bootstrap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/Bootstrap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Bootstrap(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Authenticate(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_AuthenticateWithGitlabPrivateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitlabPrivateToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).AuthenticateWithGitlabPrivateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/AuthenticateWithGitlabPrivateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).AuthenticateWithGitlabPrivateToken(ctx, req.(*GitlabPrivateToken))
	}
	return interceptor(ctx, in, info, handler)
}

var _Auth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "auth.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Auth_Ping_Handler,
		},
		{
			MethodName: "Bootstrap",
			Handler:    _Auth_Bootstrap_Handler,
		},
		{
			MethodName: "Authenticate",
			Handler:    _Auth_Authenticate_Handler,
		},
		{
			MethodName: "AuthenticateWithGitlabPrivateToken",
			Handler:    _Auth_AuthenticateWithGitlabPrivateToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}

func init() { proto.RegisterFile("auth.proto", fileDescriptor_auth_e725c9a165800d3c) }

var fileDescriptor_auth_e725c9a165800d3c = []byte{
	// 293 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0xcd, 0x4a, 0xc4, 0x30,
	0x14, 0x85, 0xe9, 0x4c, 0x15, 0x7b, 0xfd, 0x41, 0x82, 0x68, 0xa9, 0x0a, 0x92, 0x85, 0xc8, 0x2c,
	0x1a, 0x9c, 0xd9, 0xb9, 0x53, 0x10, 0x99, 0xae, 0x8a, 0x54, 0xba, 0x4e, 0x25, 0xd3, 0x06, 0x6b,
	0x52, 0x3a, 0xb7, 0x03, 0xee, 0xc4, 0x57, 0xf0, 0xd1, 0x7c, 0x05, 0x1f, 0x44, 0x92, 0xcc, 0x68,
	0x41, 0xc7, 0xdd, 0xcd, 0xf9, 0x6e, 0x0e, 0xf7, 0x1c, 0x00, 0xde, 0x61, 0x15, 0x37, 0xad, 0x46,
	0x4d, 0x7c, 0x33, 0x47, 0xc7, 0xa5, 0xd6, 0x65, 0x2d, 0x98, 0xd5, 0x8a, 0x6e, 0xc6, 0xc4, 0x73,
	0x83, 0x2f, 0x6e, 0x25, 0x3a, 0x59, 0x42, 0xde, 0x48, 0xc6, 0x95, 0xd2, 0xc8, 0x51, 0x6a, 0x35,
	0x77, 0x94, 0x8e, 0x61, 0xeb, 0xba, 0xc3, 0x6a, 0xaa, 0x66, 0x9a, 0xec, 0xc3, 0xf0, 0xa1, 0xad,
	0x43, 0xef, 0xcc, 0xbb, 0x08, 0xee, 0xcd, 0x48, 0x0e, 0x60, 0x23, 0xd3, 0x4f, 0x42, 0x85, 0x03,
	0xab, 0xb9, 0x07, 0x3d, 0x5d, 0xaa, 0x3f, 0xd8, 0xeb, 0xe3, 0x23, 0x18, 0x26, 0x79, 0x66, 0xdc,
	0x92, 0x3c, 0x5b, 0xb9, 0x25, 0x79, 0x46, 0x47, 0x40, 0xee, 0x24, 0xd6, 0xbc, 0x48, 0x5b, 0xb9,
	0xe0, 0x28, 0xfe, 0x31, 0x19, 0xbf, 0x0e, 0xc0, 0x37, 0x87, 0x91, 0x14, 0xfc, 0x54, 0xaa, 0x92,
	0x1c, 0xc6, 0x2e, 0x47, 0xbc, 0x0a, 0x19, 0xdf, 0x9a, 0x90, 0xd1, 0x1a, 0x9d, 0x86, 0x6f, 0x1f,
	0x9f, 0xef, 0x03, 0x42, 0x77, 0xd9, 0xe2, 0x92, 0x99, 0x96, 0x58, 0x23, 0x55, 0x79, 0xe5, 0x8d,
	0xc8, 0x04, 0x82, 0x1b, 0xad, 0x71, 0x8e, 0x2d, 0x6f, 0xd6, 0xda, 0xee, 0xc5, 0xb6, 0xe5, 0xef,
	0x6e, 0xce, 0x61, 0xc7, 0xcc, 0x42, 0xa1, 0x7c, 0xe4, 0x28, 0xc8, 0xb6, 0xe3, 0xf6, 0xd8, 0x28,
	0x70, 0x0f, 0x93, 0x7a, 0x0a, 0xb4, 0xbf, 0x97, 0x4b, 0xac, 0xfe, 0xc8, 0x1c, 0xba, 0x0f, 0xbf,
	0x49, 0xcf, 0xaa, 0xd8, 0xb4, 0x27, 0x4d, 0xbe, 0x02, 0x00, 0x00, 0xff, 0xff, 0x57, 0x83, 0x76,
	0x2b, 0xf0, 0x01, 0x00, 0x00,
}
